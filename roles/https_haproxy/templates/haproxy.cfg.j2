{% set lb_http  = loadbalancer|selectattr("http")|list %}
{% set lb_other = loadbalancer|rejectattr("http")|list %}
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
{% if enable_https and use_fixed_cert %}
	crt-base {{cert_dir}}
{% elif enable_https %}
	crt-base {{letsencrypt.cert_dir}}
{% endif %}


	ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-AES128-GCM-SHA256
	ssl-default-bind-options no-sslv3 no-tlsv10
{% if enable_https and haproxy.custom_dhparam %}
	ssl-dh-param-file {{haproxy.dhparam_file}}
{% elif enable_https %}
	tune.ssl.default-dh-param {{haproxy.dhparam_keysize}}
{% endif %}

defaults
	log	global
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

#--------------------------------------------------------------------
#  frontend
# -------------------------------------------------------------------
frontend fe_https
{% if enable_https %}
	bind    *:443 ssl {% for host in lb_http %} crt {{host.hostname}}/priv+fullchain.pem{% endfor %} transparent
	bind [::]:443 ssl {% for host in lb_http %} crt {{host.hostname}}/priv+fullchain.pem{% endfor %} transparent
{% else %}
	bind    *:80 transparent
	bind [::]:80 transparent
{% endif %}

	mode	http
	option	httplog

{% if enable_https %}
	# secure cookies:
	# todo: only for satosa
	#rspirep ^(set-cookie:.*) \1;\ Secure;\ HttpOnly;\ SameSite=strict
	#rspirep ^(set-cookie:.*) \1;\ Secure;\ HttpOnly;\ SameSite=lax

	http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
	# TODO: only make exception for pyff/mdq
	#http-response set-header Content-Security-Policy   "default-src 'self'; frame-src 'none'; form-action 'self'; frame-ancestors 'none'; block-all-mixed-content;"
	#http-response set-header Content-Security-Policy   "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-src 'none'; frame-ancestors 'none'; form-action 'self'; block-all-mixed-content;"

	#http-response set-header X-Frame-Options "DENY"
	#http-response set-header X-XSS-Protection "1; mode=block"
	#http-response set-header X-Content-Type-Options "nosniff"
{% endif %}

	http-request set-header X-Forwarded-For "%[src]"
	http-request set-header X-Forwarded-Port "%[dst_port]"
{% if enable_https %}
	http-request set-header X-Forwarded-Proto "https"
	http-request set-header Forwarded "for=%[src]; proto=https; by=%[dst]"
{% else %}
	http-request set-header X-Forwarded-Proto "http"
	http-request set-header Forwarded "for=%[src]; proto=http; by=%[dst]"
{% endif %}

{% if iprange.vpn is defined %}
	acl vpn src {% for vpnname in iprange.vpn %}{{iprange.vpn[vpnname]}} {% endfor %}

{% endif %}

{% for host in lb_http %}
	acl acl_{{host.hostname}} hdr(host) -i {{host.hostname}}
{% if host.acl is defined %}
	acl acl_ip_{{host.hostname}} src 127.0.0.1 ::1 {{host.acl}}
	http-request deny if acl_{{host.hostname}} !acl_ip_{{host.hostname}}
{% endif %}
	use_backend be_{{host.hostname}} if acl_{{host.hostname}}

{% endfor %}

{% for host in lb_http %}
backend be_{{host.hostname}}
	mode	http
	{% for be_server in host.backend_hosts -%}
	server {{host.hostname}} {{be_server}}:{{host.backend_port}} check
	{% endfor %}

{% endfor %}

{% for host in lb_other %}
listen proxy_{{host.hostname}}_{{host.frontend_port}}
{% if enable_https %}
	bind    *:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
	bind [::]:{{host.frontend_port}} ssl crt {{host.hostname}}/priv+fullchain.pem transparent
{% else %}
	bind    *:{{host.frontend_port}} transparent
	bind [::]:{{host.frontend_port}} transparent
{% endif %}

	mode	tcp
	option	tcpka
	option	tcplog

	{% for be_server in host.backend_hosts -%}
	server {{be_server}} {{be_server}}:{{host.backend_port}} check
	{% endfor %}

{% endfor %}

