---
- name: Ensure that packages are installed
  apt:
    name:
      - build-essential
      - git
      - xmlsec1
      - libffi-dev
      - python3.5
      - python-dev
      - python-setuptools
      - python3-pip
      - mongodb
      - mongodb-server
      - libmariadbclient-dev
    state: present

- name: install python3 virtualenv
  pip:
    name: virtualenv
    executable: pip3

- name: create SATOSA user
  user: name=satosa shell="/bin/false" state=present

- name: Create project directory
  file: path="{{ satosa_project_dir }}" state=directory mode=0755 owner=satosa

- name: Enable and start mongoDB
  systemd: daemon_reload=yes name=mongodb state=started enabled=true

- name: Install backup script
  template:
    src: "satosa_mongodb_backup.sh.j2"
    dest: "{{backup_runparts}}/satosa_mongodb_backup.sh"
    mode: 0755

- block:
    # requirements.txt can be generated from virtualenv/bin/pip freeze
    - name: Generate requirements.txt.j2 from template
      template:
        src: "requirements.txt.j2"
        dest: "{{ satosa_project_dir }}/requirements.txt"

    - name: Install SATOSA from requirements.txt
      pip:
        requirements: "{{ satosa_project_dir }}/requirements.txt"
        virtualenv: "{{ satosa_env_dir }}"
        virtualenv_python: python3

    - name: Create SATOSA  proxy_conf configuration
      template:
        src: proxy_conf.yaml.j2
        dest: "{{ satosa_env_dir }}/proxy_conf.yaml"

    - name: Copy internal_attributes.yaml definition
      template:
        src: internal_attributes.yaml.j2
        dest: "{{ satosa_env_dir }}/internal_attributes.yaml"

    - name: Create backends directory
      file: path="{{ satosa_env_dir }}/plugins/backends" state=directory mode=0755

    - name: Create saml2_backend.yaml definition
      template:
        src: "{{ item }}.j2"
        dest: "{{ satosa_env_dir }}/plugins/backends/{{ item }}"
      with_items:
        - saml2_backend.yaml
        - saml2_mirrorbackend.yaml

    - name: Create frontends directory
      file: path="{{ satosa_env_dir }}/plugins/frontends" state=directory mode=0755

    - name: Create saml2_frontend.yaml definition
      template:
        src: "{{ item }}.j2"
        dest: "{{ satosa_env_dir }}/plugins/frontends/{{ item }}"
      with_items:
        - saml2_frontend.yaml
        - saml2_mirrorfrontend.yaml

    - name: Create oidc_frontend.yaml definition
      template:
        src: oidc_frontend.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/frontends/oidc_frontend.yaml"

    - name: Create micro_services directory
      file: path="{{ satosa_env_dir }}/plugins/micro_services" state=directory mode=0755

    - name: Create custom_logging_services.yaml definition
      template:
        src: custom_logging_service.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/custom_logging_service.yaml"

    - name: Create db_attributes_store.yaml definition
      template:
        src: db_attribute_store.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/db_attribute_store.yaml"

    - name: Create sbs_attributes_store.yaml definition
      template:
        src: sbs_attribute_store.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/sbs_attribute_store.yaml"

    - name: Create consent.yaml definition
      template:
        src: consent.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/consent.yaml"

    - name: Create r_and_s_acl.yaml definition
      template:
        src: r_and_s_acl.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/r_and_s_acl.yaml"

    - name: Create attribute_filter.yaml definition
      template:
        src: attribute_filter.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/attribute_filter.yaml"

    - name: Create custom_uid.yaml definition
      template:
        src: custom_uid.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/custom_uid.yaml"

    - name: Create static directory
      file: path="{{ satosa_static_dir }}" state=directory mode=0755

    - name: Create custom_alias.yaml definition
      template:
        src: custom_alias.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/custom_alias.yaml"

    - name: Create metainfo.yaml definition
      template:
        src: metainfo.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/metainfo.yaml"

    - name: Copy error and info pages to static alias directory
      copy:
        src: "{{ item }}"
        dest: "{{ satosa_static_dir }}/{{ item }}"
      with_items:
        - info
        - error
        - access_denied
        - r_and_s_failed

    - name: Create MongoDB database satosa with collection clients
      shell: mongo satosa --quiet --eval "db.createCollection('clients')"
      register: result
      changed_when: (result.stdout | from_json).ok == 1

    - name: Create logging directory
      file: path="{{ satosa_log_dir }}" state=directory mode=0755

    - name: Create certs directory
      file: path="{{ satosa_env_dir }}/certs" state=directory mode=0755

    - name: Copy Satosa certificates
      copy:
        content: "{{ item.cert.pub }}"
        dest: "{{ satosa_env_dir }}/certs/{{ item.dest }}.crt"
      with_items:
        - { dest: "signing",  cert: "{{ satosa_metadata_cert }}" }
        - { dest: "frontend", cert: "{{ satosa_frontend_cert }}" }
        - { dest: "backend",  cert: "{{ satosa_backend_cert }}"  }

    - name: Copy Satosa keys
      copy:
        content: "{{item.cert.priv}}"
        dest: "{{ satosa_env_dir }}/certs/{{ item.dest }}.key"
      with_items:
        - { dest: "signing",  cert: "{{ satosa_metadata_cert }}" }
        - { dest: "frontend", cert: "{{ satosa_frontend_cert }}" }
        - { dest: "backend",  cert: "{{ satosa_backend_cert }}"  }


    - name: Create keys directory
      file: path="{{ satosa_env_dir }}/keys" state=directory mode=0755

    - name: Create satosa private key (for CMservice)
      shell: "openssl genpkey -algorithm RSA -out '{{ satosa_env_dir }}/keys/satosa.pem' \
                              -pkeyopt rsa_keygen_bits:2048"
      args:
        creates: "{{ satosa_env_dir }}/keys/satosa.pem"

    - name: Extract satosa public key (for CMservice)
      shell: "openssl rsa -pubout -in '{{ satosa_env_dir }}/keys/satosa.pem' \
                          -out '{{ satosa_env_dir }}/keys/satosa.pub'"
      args:
        creates: "{{ satosa_env_dir }}/keys/satosa.pub"

    - name: Create SATOSA systemd service
      template:
        src: satosa.service.j2
        dest: "{{ satosa_env_dir }}/satosa.service"
        mode: 0644

    - name: Create mapper directory
      file: path="{{ satosa_env_dir }}/mapper" state=directory mode=0755

    - name: Copy empty mapper config
      copy:
        src: "{{ item }}"
        dest: "{{ satosa_env_dir }}/mapper/{{ item }}"
        mode: 0755
      with_items:
        - __init__.py
        - basic.py
        - uri.py
        - unspecified.py
        - shibboleth.py

    - name: Create metadata directory
      file: path="{{ satosa_metadata_dir }}" state=directory mode=0755 owner=satosa

    - name: Create client directory
      file: path="{{ satosa_client_dir }}" state=directory mode=0755 owner=satosa

    - name: Copy clients.json example file
      template:
        src: clients.json.j2
        dest: "{{ satosa_client_dir }}/default.json"
        mode: 0755

    - name: Create sync_clients script
      template:
        src: sync_clients.j2
        dest: "{{ satosa_env_dir }}/sync_clients"
        mode: 0755

    - name: Insert OIDC clients
      shell: "{{ satosa_env_dir }}/sync_clients {{ satosa_client_dir }}"
      changed_when: false

    - name: Copy metadata generating script
      template:
        src: gen_metadata.j2
        dest: "{{ satosa_env_dir }}/gen_metadata"
        mode: 0755

    - name: Generate metadata
      shell: "{{ satosa_env_dir }}/gen_metadata {{ satosa_metadata_dir }}"
      args:
        chdir: "{{ satosa_env_dir }}"
      changed_when: false

  become: "yes"
  become_user: satosa

- name: Copy to satosa.service in /etc/systemd/system
  # systemd/ctl can not enable symlinked services :(
  # https://github.com/systemd/systemd/issues/3010
  #- name: Create symlink to satosa.service in /etc/systemd/system
  #  file: src="{{ satosa_env_dir }}/satosa.service"
  #        dest=/etc/systemd/system/satosa.service state=link
  copy:
    src: "{{ satosa_env_dir }}/satosa.service"
    dest: /etc/systemd/system/satosa.service
    remote_src: yes

- name: Copy filebeat config
  template: >
    src=fb_satosa.yml.j2
    dest=/etc/filebeat/conf.d/fb_satosa.yml
  notify: "restart filebeat"

- name: Copy rsyslog config
  copy: >
    src=rsyslog_satosa.conf
    dest=/etc/rsyslog.d/satosa.conf
  notify: "restart rsyslog"

- name: Copy filebeat config
  template: >
    src=fb_satosa.yml.j2
    dest=/etc/filebeat/conf.d/fb_satosa.yml
  notify: "restart filebeat"

- name: Copy rsyslog config
  copy: >
    src=rsyslog_satosa.conf
    dest=/etc/rsyslog.d/satosa.conf
  notify: "restart rsyslog"

- name: Copy logrotate config
  copy: >
    src=logrotate_satosa
    dest=/etc/logrotate.d/satosa

- name: restart SATOSA
  systemd: daemon_reload=yes name=satosa state=restarted enabled=yes
  changed_when: false
