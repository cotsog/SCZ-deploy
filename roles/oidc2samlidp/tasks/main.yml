---
- name: Ensure that packages are installed
  apt:
    state: present
    name:
      - build-essential
      - git
      - xmlsec1
      - libffi-dev
      - python3.5
      - python-dev
      - python-setuptools
      - python3-pip

- name: install python3 virtualenv
  pip:
    name: virtualenv
    executable: pip3

- name: create SATOSA user
  user: name=satosa shell="/bin/false" state=present

- name: Create project directory
  file: path="{{ satosa_project_dir }}" state=directory mode=0755 owner=satosa

- block:
    - name: fetch SATOSA from {{ satosa_repo_url }}, version {{ satosa_repo_version }}
      git:
        repo: "{{ satosa_repo_url }}"
        dest: "{{ satosa_src_dir }}"
        version: "{{ satosa_repo_version }}"
        accept_hostkey: "yes"
        force: "yes"

    - name: install SATOSA from {{ satosa_src_dir }} to {{ satosa_env_dir }}
      pip:
        name: "{{ satosa_src_dir }}"
        virtualenv: "{{ satosa_env_dir }}"
        virtualenv_python: python3
        state: latest

    - name: Create SATOSA  proxy_conf configuration
      template:
        src: proxy_conf.yaml.j2
        dest: "{{ satosa_env_dir }}/proxy_conf.yaml"

    - name: Copy internal_attributes.yaml definition
      template:
        src: "internal_attributes.yaml.j2"
        dest: "{{ satosa_env_dir }}/internal_attributes.yaml"

    - name: Create backends directory
      file: path="{{ satosa_env_dir }}/plugins/backends" state=directory mode=0755

    - name: Create google_backend.yaml definition
      template:
        src: google_backend.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/backends/google_backend.yaml"

    - name: Create frontends directory
      file: path="{{ satosa_env_dir }}/plugins/frontends" state=directory mode=0755

    - name: Create saml2_frontend.yaml definition
      template:
        src: saml2_mirrorfrontend.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/frontends/saml2_mirrorfrontend.yaml"

    - name: Create micro_services directory
      file: path="{{ satosa_env_dir }}/plugins/micro_services" state=directory mode=0755

    - name: Create custom_alias.yaml definition
      template:
        src: custom_alias.yaml.j2
        dest: "{{ satosa_env_dir }}/plugins/micro_services/custom_alias.yaml"

    - name: Create certs directory
      file: path="{{ satosa_env_dir }}/certs" state=directory mode=0755

    - name: create self-signed Token Signing SSL certs
      command: >
        openssl req -new -nodes -x509 -subj '/C=NL/CN={{ item }}'
        -days 3650 -keyout '{{ satosa_env_dir }}/certs/{{ item }}.key'
        -out '{{ satosa_env_dir }}/certs/{{ item }}.crt' -extensions v3_ca
      args:
        creates: "{{ satosa_env_dir }}/certs/{{ item }}.crt"
      with_items:
        - frontend
        - signing

    - name: Create SATOSA systemd service
      template:
        src: satosa.service.j2
        dest: "{{ satosa_env_dir }}/satosa.service"
        mode: 0644

    - name: Create mapper directory
      file: path="{{ satosa_env_dir }}/mapper" state=directory mode=0755

    - name: Copy empty mapper config
      copy:
        src: "{{ item }}"
        dest: "{{ satosa_env_dir }}/mapper/{{ item }}"
        mode: 0755
      with_items:
        - __init__.py
        - basic.py
        - uri.py
        - unspecified.py
        - shibboleth.py

    - name: Create metadata directory
      file: path="{{ satosa_env_dir }}/metadata" state=directory mode=0755

    - name: Copy metadata generating script
      copy:
        src: gen_metadata
        dest: "{{ satosa_env_dir }}/gen_metadata"
        mode: 0755

    - name: Generate metadata
      shell: ./gen_metadata
      args:
        chdir: "{{ satosa_env_dir }}"

    - name: Retreive Proxy metadata
      get_url:
        url: "{{ sp_proxy_metadata_url }}"
        dest: "{{ satosa_env_dir }}/metadata/sp_proxy_metadata.xml"

  become: "yes"
  become_user: satosa

- name: Copy to satosa.service in /etc/systemd/system
  # systemd/ctl can not enable symlinked services :(
  # https://github.com/systemd/systemd/issues/3010
  #- name: Create symlink to satosa.service in /etc/systemd/system
  #  file: src="{{ satosa_env_dir }}/satosa.service"
  #        dest=/etc/systemd/system/satosa.service state=link
  copy:
    src: "{{ satosa_env_dir }}/satosa.service"
    dest: "/etc/systemd/system/satosa.service"
    remote_src: yes

- name: restart SATOSA
  systemd: daemon_reload=yes name=satosa state=restarted enabled=yes
