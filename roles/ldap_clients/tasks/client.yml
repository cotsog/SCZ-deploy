---
- debug: var=item_client

- set_fact: client="{{item_client}}"
- set_fact: lsc_dir="{{lsc_config_dir}}/{{client.ldap_o | replace(' ','_')}}"

#- name: Check if client test organization already exists
#  shell: >
#    ldapsearch -c -x -D "{{ client_ldap.binddn }}" -w "{{ client_ldap_password }}"
#    -H ldapi:/// -b '{{ client_ldap.basedn }}' o
#  register: org
#  changed_when: false

#- name: Add client test organization
#  command: >
#    ldapadd -c -x -D "{{ client_ldap.binddn }}" -w "{{ client_ldap_password }}"
#    -f "{{ ldap_ldif_dir }}/add_test_organization.ldif"
#  register: result
#  failed_when: "(result.rc not in [0, 68])"
#  when: org.stdout.find(test_organization.o) == -1

- name: "Create the client {{client.ldap_o}} organization"
  ldap_entry:
    # SASL EXTERNAL Should work
    dn: "o={{ client.ldap_o | ldap_escape }},{{ client_ldap.basedn }}"
    objectClass: organization
    attributes:
      o: "{{ client.ldap_o | ldap_escape }}"

- name: "Create the admin identity for {{client.ldap_o}}"
  ldap_entry:
    dn: "cn=admin,o={{ client.ldap_o | ldap_escape }},{{ client_ldap.basedn }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      cn: admin
      userPassword: "{{ '%s' |  format(client.password) | slapd_hash }}"

# set the password separately from creating the admin entry, because
# we want the password to update when it changes in ansible
- name: "Set admin password for {{client.ldap_o}}"
  ldap_attr:
    dn: "cn=admin,o={{ client.ldap_o | ldap_escape }},{{ client_ldap.basedn }}"
    name: userPassword
    values: "{{ '%s' |  format(client.password) | slapd_hash }}"
    state: exact

- name: "Add database skeleton to client db"
  ldap_entry:
    dn: "ou={{item | ldap_escape }},o={{ client.ldap_o | ldap_escape }},{{ client_ldap.basedn }}"
    objectClass: organizationalUnit
    attributes:
      ou: "{{item | ldap_escape }}"
  with_items:
    - People
    - Groups
    - Sequence

- name: "Set default uidNumer sequence for client {{client.ldap_o}}"
  ldap_entry:
    dn: "cn=uidNumberSequence,ou=Sequence,o={{ client.ldap_o | ldap_escape }},\
         {{ client_ldap.basedn }}"
    objectClass: device
    attributes:
      cn: uidNumberSequence
      serialNumber: "{{ client.uid_start }}"

- name: "Set default giNumber sequence for client {{client.ldap_o}}"
  ldap_entry:
    dn: "cn=gidNumberSequence,ou=Sequence,o={{ client.ldap_o | ldap_escape }},\
         {{ client_ldap.basedn }}"
    objectClass: device
    attributes:
      cn: gidNumberSequence
      serialNumber: "{{ client.gid_start }}"

# LSC config
- name: "Make sure LSC directory {{lsc_dir}} exists"
  file:
    path: "{{ lsc_dir }}"
    state: directory
    mode: 0755

- name: Link LSC logging config
  file:
    dest: "{{ lsc_dir }}/logback.xml"
    state: link
    src: "{{ lsc_config_dir }}/logback.xml"
    force: yes

- name: Copy LSC configuration
  template:
    src: "lsc.xml.j2"
    dest: "{{ lsc_dir }}/lsc.xml"
    backup: yes
    force: no
