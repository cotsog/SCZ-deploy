<?xml version="1.0" ?>
<lsc xmlns="http://lsc-project.org/XSD/lsc-core-2.1.xsd" revision="0">
  <connections>
    <ldapConnection>
      <name>ldap-src-conn</name>
      <url>ldap://localhost:389/{{ ldap.basedn }}</url>
      <username>{{ ldap.binddn }}</username>
      <password>{{ ldap_password }}</password>
      <authentication>SIMPLE</authentication>
      <referral>IGNORE</referral>
      <derefAliases>NEVER</derefAliases>
      <version>VERSION_3</version>
      <pageSize>-1</pageSize>
      <factory>com.sun.jndi.ldap.LdapCtxFactory</factory>
      <tlsActivated>false</tlsActivated>
    </ldapConnection>
    <ldapConnection>
      <name>ldap-dst-conn</name>
      <url>ldap://localhost:389/{{ client_ldap.basedn }}</url>
      <username>{{ client_ldap.binddn }}</username>
      <password>{{ client_ldap_password }}</password>
      <authentication>SIMPLE</authentication>
      <referral>IGNORE</referral>
      <derefAliases>NEVER</derefAliases>
      <version>VERSION_3</version>
      <pageSize>-1</pageSize>
      <factory>com.sun.jndi.ldap.LdapCtxFactory</factory>
      <tlsActivated>false</tlsActivated>
    </ldapConnection>
  </connections>
  <audits>
    <csvAudit>
        <name>csv</name>
        <append>true</append>
        <operations>create, delete</operations>
        <file>/tmp/dump.csv</file>
        <datasets>cn, dn</datasets>
        <separator>,</separator>
    </csvAudit>
  </audits>
  <tasks>
    <task>
      <name>AA_PeopleSyncTask</name>
      <bean>org.lsc.beans.SimpleBean</bean>
      <ldapSourceService>
        <name>openldap-src-service</name>
        <connection reference="ldap-src-conn" />
        <baseDn>ou=People,o={{ client.co_name }},{{ ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>uid</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>cn</string>
          <string>sn</string>
          <string>uid</string>
          <string>homeDirectory</string>
          <string>uidNumber</string>
          <string>gidNumber</string>
          <string>sshPublicKey</string>
        </fetchedAttributes>
        <getAllFilter><![CDATA[(objectClass=inetOrgPerson)]]></getAllFilter>
        <getOneFilter><![CDATA[(&(objectClass=inetOrgPerson)(uid={uid}))]]></getOneFilter>
        <cleanFilter><![CDATA[(&(objectClass=inetOrgPerson)(uid={uid}))]]></cleanFilter>
      </ldapSourceService>
      <ldapDestinationService>
        <name>ldap-dst-service</name>
        <connection reference="ldap-dst-conn" />
        <baseDn>ou=People,o={{ client.ldap_o }},{{ client_ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>uid</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>objectClass</string>
          <string>cn</string>
          <string>sn</string>
          <string>uid</string>
          <string>homeDirectory</string>
          <string>uidNumber</string>
          <string>gidNumber</string>
          <string>sshPublicKey</string>
        </fetchedAttributes>
        <getAllFilter>(objectClass=inetorgperson)</getAllFilter>
        <getOneFilter>(&amp;(objectClass=inetorgperson)(uid={uid}))</getOneFilter>
      </ldapDestinationService>
      <propertiesBasedSyncOptions>
        <mainIdentifier>"uid=" + srcBean.getDatasetFirstValueById("uid") + ",ou=People,o={{ client.ldap_o }},{{ client_ldap.basedn }}"</mainIdentifier>
        <defaultDelimiter>;</defaultDelimiter>
        <defaultPolicy>FORCE</defaultPolicy>
        <conditions>
            <create>true</create>
            <update>true</update>
            <delete>true</delete>
            <changeId>false</changeId>
        </conditions>
        <dataset>
          <name>objectClass</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>rjs:<![CDATA[
              var objectClass = [];
              keys = srcBean.getDatasetValuesById("sshPublicKey");
              if (keys.size() > 0) objectClass.push("ldapPublicKey");
              objectClass;
            ]]></string>
            <string>"person"</string>
            <string>"inetOrgPerson"</string>
            <string>"posixAccount"</string>
          </forceValues>
          <createValues></createValues>
          <delimiter>,</delimiter>
        </dataset>
        <dataset>
          <name>homeDirectory</name>
          <forceValues>
            <string>"/home/"+srcBean.getDatasetFirstValueById("uid")</string>
          </forceValues>
        </dataset>
        <dataset>
          <name>uidNumber</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>SequencesFactory.getInstance(ldap.getJndiServices()).getNextValue("cn=uidNumberSequence,ou=Sequence,o={{ client.ldap_o }},{{ client_ldap.basedn }}", "serialNumber")</string>
          </forceValues>
        </dataset>
        <dataset>
          <name>gidNumber</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>SequencesFactory.getInstance(ldap.getJndiServices()).getCurrentValue("cn=uidNumberSequence,ou=Sequence,o={{ client.ldap_o }},{{ client_ldap.basedn }}", "serialNumber")</string>
          </forceValues>
        </dataset>
      </propertiesBasedSyncOptions>
    </task>
    <task>
      <name>AB_GroupsSyncTask</name>
      <bean>org.lsc.beans.SimpleBean</bean>
      <ldapSourceService>
        <name>openldap-src-groups</name>
        <connection reference="ldap-src-conn" />
        <baseDn>ou=Groups,o={{ client.co_name }},{{ ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>cn</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>cn</string>
          <string>ou</string>
          <string>member</string>
        </fetchedAttributes>
        <getAllFilter><![CDATA[(&(objectClass=groupOfNames)(!(cn=GRP:CO:*)))]]></getAllFilter>
        <getOneFilter><![CDATA[(&(objectClass=groupOfNames)(cn={cn}))]]></getOneFilter>
        <cleanFilter><![CDATA[(&(objectClass=groupOfNames)(cn={description}))]]></cleanFilter>
      </ldapSourceService>
      <ldapDestinationService>
        <name>ldap-dst-groups</name>
        <connection reference="ldap-dst-conn" />
        <baseDn>ou=Groups,o={{ client.ldap_o }},{{ client_ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>description</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>objectClass</string>
<!--           <string>memberUid</string> -->
          <string>sczMember</string>
          <string>description</string>
          <string>gidNumber</string>
        </fetchedAttributes>
        <getAllFilter>(objectClass=posixGroup)</getAllFilter>
        <getOneFilter>(&amp;(objectClass=posixGroup)(description={cn}))</getOneFilter>
      </ldapDestinationService>
      <propertiesBasedSyncOptions>
        <mainIdentifier><!--https://regex101.com/r/A4i95l/1-->
          <![CDATA[rjs:
            var type = srcBean.getDatasetFirstValueById("ou");
            var cn = srcBean.getDatasetFirstValueById("cn");
            var group = cn.match(/^(?:GRP)?(?:CO)?(?:COU)?:(.*?)$/);
            "cn=" + type + (group[1]?"_" + group[1]:"") + ",ou=Groups,o={{ client.ldap_o }},{{ client_ldap.basedn }}";
          ]]>
        </mainIdentifier>
        <defaultDelimiter>;</defaultDelimiter>
        <defaultPolicy>FORCE</defaultPolicy>
        <conditions>
                <create>true</create>
                <update>true</update>
                <delete>true</delete>
                <changeId>false</changeId>
        </conditions>
        <dataset>
          <name>objectClass</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>"posixGroup"</string>
            <string>"sczGroup"</string>
          </forceValues>
          <createValues></createValues>
        </dataset>
        <dataset>
          <name>description</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues></forceValues>
          <createValues>
            <string>srcBean.getDatasetFirstValueById("cn")</string>
          </createValues>
        </dataset>
<!--        <dataset>
          <name>memberUid</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>
           <![CDATA[rjs:
                java.lang.System.out.println("memberUid srcCn:"+srcBean.getDatasetFirstValueById("cn"));
                var memberSrcDns = srcBean.getDatasetValuesById("member");
                var memberDstUids = [];
                for  (var i=0; i<memberSrcDns.size(); i++) {
                    try {
                       memberSrcDn = memberSrcDns.get(i);
                       if (!srcLdap.exists(memberSrcDn).length) continue;
                       java.lang.System.out.println("memberSrcDn:" + memberSrcDn);
                       uid = srcLdap.attribute(memberSrcDn, "uid").get(0);
                       memberDstRdn = ldap.search("ou=People,o={{ client.ldap_o }}", "(uid=" + uid + ")");
                       memberDstDn = memberDstRdn.get(0) + "," + ldap.getContextDn();
                       memberDstUid = ldap.attribute(memberDstDn, "uid").get(0);
                       memberDstUids.push(memberDstUid);
                    } catch(e) {
                       continue;
                    }
                }
                java.lang.System.out.println("membersDstUids:" + memberDstUids);
                memberDstUids
            ]]>
            </string>
          </forceValues>
          <createValues></createValues>
        </dataset>-->
       <dataset>
          <name>sczMember</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>
            <![CDATA[rjs:
                java.lang.System.out.println("\nsczMember srcCn:"+srcBean.getDatasetFirstValueById("cn"));
                var memberSrcDns = srcBean.getDatasetValuesById("member");
                var memberDstDns = [];
                for  (var i=0; i<memberSrcDns.size(); i++) {
                    memberSrcDn = memberSrcDns.get(i);
                    if (!srcLdap.exists(memberSrcDn).length) continue;
                    java.lang.System.out.println("memberSrcDn:" + memberSrcDn);
                    uid_ = srcLdap.attribute(memberSrcDn, "uid");
                    cn_ = srcLdap.attribute(memberSrcDn, "cn");
                    memberDstRdn = [];
                        if (uid_.length) {
                            uid = uid_.get(0);
                            memberDstRdn = ldap.search("ou=People,o={{ client.ldap_o }}", "(uid=" + uid + ")");
                        } else if (cn_.length) {
                            cn = cn_.get(0);
                            memberDstRdn = ldap.search("ou=Groups,o={{ client.ldap_o }}", "(description=" + cn + ")");
                        }
                        if (memberDstRdn.length) {
                            memberDstDn = memberDstRdn.get(0) + "," + ldap.getContextDn();
                            memberDstDns.push(memberDstDn);
                        }
                }
                java.lang.System.out.println("membersDstDns:" + memberDstDns);
                memberDstDns
            ]]>
            </string>
          </forceValues>
          <createValues></createValues>
        </dataset>
        <dataset>
          <name>gidNumber</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>SequencesFactory.getInstance(ldap.getJndiServices()).getNextValue("cn=gidNumberSequence,ou=Sequence,o={{ client.ldap_o }},{{ client_ldap.basedn }}", "serialNumber")</string>
          </forceValues>
        </dataset>
      </propertiesBasedSyncOptions>
    </task>
  </tasks>
  <security>
    <encryption>
      <keyfile>etc/lsc.key</keyfile>
      <algorithm>AES</algorithm>
      <strength>128</strength>
    </encryption>
  </security>
</lsc>