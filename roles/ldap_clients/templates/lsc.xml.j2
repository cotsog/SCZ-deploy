<?xml version="1.0" ?>
<lsc xmlns="http://lsc-project.org/XSD/lsc-core-2.1.xsd" revision="0">
  <connections>
    <ldapConnection>
      <name>ldap-src-conn</name>
      <url>ldap://localhost:389/{{ ldap.basedn }}</url>
      <username>{{ ldap.binddn }}</username>
      <password>{{ ldap_password }}</password>
      <authentication>SIMPLE</authentication>
      <referral>IGNORE</referral>
      <derefAliases>NEVER</derefAliases>
      <version>VERSION_3</version>
      <pageSize>-1</pageSize>
      <factory>com.sun.jndi.ldap.LdapCtxFactory</factory>
      <tlsActivated>false</tlsActivated>
    </ldapConnection>
    <ldapConnection>
      <name>ldap-dst-conn</name>
      <url>ldap://localhost:389/{{ clients_ldap.basedn }}</url>
      <username>cn=admin,{{ clients_ldap.basedn }}</username>
      <password>{{ clients_ldap_password }}</password>
      <authentication>SIMPLE</authentication>
      <referral>IGNORE</referral>
      <derefAliases>NEVER</derefAliases>
      <version>VERSION_3</version>
      <pageSize>-1</pageSize>
      <factory>com.sun.jndi.ldap.LdapCtxFactory</factory>
      <tlsActivated>false</tlsActivated>
    </ldapConnection>
  </connections>
  <audits>
    <csvAudit>
        <name>csv</name>
        <append>true</append>
        <operations>create, delete</operations>
        <file>/tmp/dump.csv</file>
        <datasets>cn, dn</datasets>
        <separator>,</separator>
    </csvAudit>
  </audits>
  <tasks>
    <task>
      <name>AA_PeopleSyncTask</name>
      <bean>org.lsc.beans.SimpleBean</bean>
      <ldapSourceService>
        <name>openldap-src-service</name>
        <connection reference="ldap-src-conn" />
        <baseDn>{{ ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>uid</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>cn</string>
          <string>sn</string>
          <string>uid</string>
          <string>o</string>
          <string>homeDirectory</string>
          <string>uidNumber</string>
          <string>gidNumber</string>
          <string>sshPublicKey</string>
        </fetchedAttributes>
        <getAllFilter>(objectClass=inetOrgPerson)</getAllFilter>
        <getOneFilter>(&amp;(objectClass=inetOrgPerson)(uid={uid}))</getOneFilter>
        <cleanFilter>(&amp;(objectClass=inetOrgPerson)(uid={uid}))</cleanFilter>
      </ldapSourceService>
      <ldapDestinationService>
        <name>ldap-dst-service</name>
        <connection reference="ldap-dst-conn" />
        <baseDn>dc={{ client }},{{ clients_ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>uid</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>objectClass</string>
          <string>cn</string>
          <string>sn</string>
          <string>uid</string>
          <string>homeDirectory</string>
          <string>sshPublicKey</string>
          <string>uidNumber</string>
          <string>gidNumber</string>
        </fetchedAttributes>
        <getAllFilter>(objectClass=inetorgperson)</getAllFilter>
        <getOneFilter>(&amp;(objectClass=inetorgperson)(uid={uid}))</getOneFilter>
      </ldapDestinationService>
      <propertiesBasedSyncOptions>
        <mainIdentifier>rjs:<![CDATA[
          uid = srcBean.getDatasetFirstValueById("uid");
          o = srcBean.getDatasetFirstValueById("o");
          "uid=" + uid + ",ou=People,o=" + o + ",dc={{ client }},{{ clients_ldap.basedn }}";
        ]]></mainIdentifier>
        <defaultDelimiter>;</defaultDelimiter>
        <defaultPolicy>FORCE</defaultPolicy>
        <conditions>
            <create>true</create>
            <update>true</update>
            <delete>true</delete>
            <changeId>false</changeId>
        </conditions>
        <dataset>
          <name>objectClass</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>rjs:<![CDATA[
              var objectClass = [];
              keys = srcBean.getDatasetValuesById("sshPublicKey");
              if (keys.size() > 0) objectClass.push("ldapPublicKey");
              objectClass;
            ]]></string>
            <string>"person"</string>
            <string>"inetOrgPerson"</string>
            <string>"posixAccount"</string>
          </forceValues>
          <createValues></createValues>
          <delimiter>,</delimiter>
        </dataset>
        <dataset>
          <name>homeDirectory</name>
          <forceValues>
            <string>"/home/" + srcBean.getDatasetFirstValueById("uid")</string>
          </forceValues>
        </dataset>
        <dataset>
          <name>uidNumber</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>rjs:<![CDATA[
               o = srcBean.getDatasetFirstValueById("o");
               dn = "cn=uidNumberSequence,ou=Sequence,o=" + o + ",dc={{ client }},{{ clients_ldap.basedn }}";
               SequencesFactory.getInstance(ldap.getJndiServices()).getNextValue(dn, "serialNumber");
             ]]></string>
          </forceValues>
        </dataset>
        <dataset>
          <name>gidNumber</name>
          <policy>KEEP</policy>
          <forceValues>
            <string>rjs:<![CDATA[
               o = srcBean.getDatasetFirstValueById("o");
               dn = "cn=gidNumberSequence,ou=Sequence,o=" + o + ",dc={{ client }},{{ clients_ldap.basedn }}";
               SequencesFactory.getInstance(ldap.getJndiServices()).getNextValue(dn, "serialNumber");
             ]]></string>
          </forceValues>
        </dataset>
      </propertiesBasedSyncOptions>
    </task>
    <task>
      <name>AB_GroupsSyncTask</name>
      <bean>org.lsc.beans.SimpleBean</bean>
      <ldapSourceService>
        <name>openldap-src-groups</name>
        <connection reference="ldap-src-conn" />
        <baseDn>{{ ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>cn</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>cn</string>
          <string>ou</string>
          <string>o</string>
          <string>member</string>
        </fetchedAttributes>
        <getAllFilter>(&amp;(objectClass=groupOfNames)(!(objectClass=labeledURIObject))(!(cn=GRP:CO:*)))</getAllFilter>
        <getOneFilter>(&amp;(objectClass=groupOfNames)(cn={cn}))</getOneFilter>
        <cleanFilter>(&amp;(objectClass=groupOfNames)(cn={description}))</cleanFilter>
      </ldapSourceService>
      <ldapDestinationService>
        <name>ldap-dst-groups</name>
        <connection reference="ldap-dst-conn" />
        <baseDn>dc={{ client }},{{ clients_ldap.basedn }}</baseDn>
        <pivotAttributes>
          <string>description</string>
        </pivotAttributes>
        <fetchedAttributes>
          <string>objectClass</string>
          <string>sczMember</string>
          <string>description</string>
          <string>gidNumber</string>
        </fetchedAttributes>
        <getAllFilter>(objectClass=posixGroup)</getAllFilter>
        <getOneFilter>(&amp;(objectClass=posixGroup)(description={cn}))</getOneFilter>
      </ldapDestinationService>
      <propertiesBasedSyncOptions>
        <!--https://regex101.com/r/A4i95l/1-->
        <mainIdentifier>rjs:<![CDATA[
            type = srcBean.getDatasetFirstValueById("ou");
            o    = srcBean.getDatasetFirstValueById("o");
            cn   = srcBean.getDatasetFirstValueById("cn");
            group = cn.match(/^(?:GRP)?(?:CO)?(?:COU)?:(.*?)$/);
            "cn=" + type + (group[1]?"_" + group[1]:"") + ",ou=Groups,o=" + o + ",dc={{ client }},{{ clients_ldap.basedn }}"
          ]]>
        </mainIdentifier>
        <defaultDelimiter>;</defaultDelimiter>
        <defaultPolicy>FORCE</defaultPolicy>
        <conditions>
          <create>true</create>
          <update>true</update>
          <delete>true</delete>
          <changeId>false</changeId>
        </conditions>
        <dataset>
          <name>objectClass</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>"posixGroup"</string>
            <string>"sczGroup"</string>
          </forceValues>
          <createValues></createValues>
        </dataset>
        <dataset>
          <name>description</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>srcBean.getDatasetFirstValueById("cn")</string>
          </forceValues>
        </dataset>
        <dataset>
          <name>sczMember</name>
          <policy>FORCE</policy>
          <defaultValues></defaultValues>
          <forceValues>
            <string>rjs:<![CDATA[
                //java.lang.System.out.println("\nsczMember srcCn:"+srcBean.getDatasetFirstValueById("cn"));
                var memberSrcDns = srcBean.getDatasetValuesById("member");
                var memberDstDns = [];
                for  (var i=0; i<memberSrcDns.size(); i++) {
                    memberSrcDn = memberSrcDns.get(i);
                    exists = srcLdap.exists(memberSrcDn).size();
                    if (!exists) continue;
                    //java.lang.System.out.println("memberSrcDn:" + memberSrcDn);
                    uid_ = srcLdap.attribute(memberSrcDn, "uid");
                    cn_  = srcLdap.attribute(memberSrcDn, "cn");
                    o_   = srcLdap.attribute(memberSrcDn, "o");
                    if (o_.size()) {
                        o = o_.get(0);
                        memberDstRdn = [];
                            if (uid_.size()) {
                                uid = uid_.get(0);
                                base = "ou=People,o=" + o + ",dc={{ client }}";
                                filter = "(uid=" + uid + ")";
                                memberDstRdn = ldap.search(base, filter);
                            } else if (cn_.size()) {
                                cn = cn_.get(0);
                                base = "ou=Groups,o=" + o + ",dc={{ client }}";
                                filter = "(description=" + cn + ")";
                                memberDstRdn = ldap.search(base, filter);
                            }
                            if (memberDstRdn.size()) {
                                memberDstDn = memberDstRdn.get(0) + "," + ldap.getContextDn();
                                //java.lang.System.out.println("memberDstDn:" + memberDstDn);
                                memberDstDns.push(memberDstDn);
                            }
                    }
                }
                memberDstDns;
            ]]>
            </string>
          </forceValues>
          <createValues></createValues>
        </dataset>
        <dataset>
          <name>gidNumber</name>
          <policy>KEEP</policy>
          <forceValues></forceValues>
          <createValues>
          <string>rjs:<![CDATA[
               o = srcBean.getDatasetFirstValueById("o");
               dn = "cn=gidNumberSequence,ou=Sequence,o=" + o + ",dc={{ client }},{{ clients_ldap.basedn }}";
               SequencesFactory.getInstance(ldap.getJndiServices()).getNextValue(dn, "serialNumber");
             ]]></string>
          </createValues>
        </dataset>
      </propertiesBasedSyncOptions>
    </task>
  </tasks>
  <security>
    <encryption>
      <keyfile>etc/lsc.key</keyfile>
      <algorithm>AES</algorithm>
      <strength>128</strength>
    </encryption>
  </security>
</lsc>

