---
- include_vars: comanage.yml

- name: Check for old comanage directories
  find:
    path: /var/www/
    patterns: [ 'comanage*','registry' ]
    file_type: directory
    recurse: "true"
  register: comanage_old_files
  failed_when: comanage_old_files.matched > 0

# TODO: the "create target dir" below doesn't do anything
# if the target is already a symlink
# see https://github.com/ansible/ansible/issues/30797
# so explicitly remove any leftover symlinks
- name: "Check if {{comanage_install_dir}} is a symlink"
  stat: "path={{ comanage_install_dir }}"
  register: result

- name: "Remove symlink {{comanage_install_dir}}"
  file:
    path: "{{ comanage_install_dir }}"
    state: absent
  when: "result.stat.exists and result.stat.islnk"

- name: Create target directories
  file:
    path: "{{ comanage_install_dir }}"
    state: directory
    recurse: "true"

- name: Fetch comanage source
  git:
    repo: "{{ comanage_repo_url }}"
    version: "{{ comanage_repo_version }}"
    dest: "{{ comanage_path }}"

# comanage tmp directory needs a specific structure; copy it from the dist
- name: Check for comanage tmp directory
  stat:
    path: "{{comanage_tmp_dir}}/sessions"
  register: comanage_tmp_stat

# ridiculously, ansible's copy action doesn't support remote recursive copies...
- name: Create comanage tmp directory
  command: "cp -R {{comanage_path}}/app/tmp.dist {{comanage_tmp_dir}}"
  when: comanage_tmp_stat.stat.exists == false

- name: Verify comanage tmp directory ownership and permissions
  file:
    path: "{{comanage_tmp_dir}}"
    owner: www-data
    group: root
    mode: u=rwX,go=rX
    state: directory
    recurse: yes

- name: Create comanage tmp symlink
  file:
    src: "{{comanage_tmp_dir}}"
    dest: "{{ comanage_path }}/local/tmp"
    state: link
    force: "true"

- name: Check if old log dir exists
  stat: "path={{comanage_tmp_dir}}/logs"
  register: logdir

- name: Check if old log files exists
  find: "paths={{comanage_tmp_dir}}/logs"
  when: logdir.stat.islnk is defined and logdir.stat.islnk == False
  register: logfiles

- name: Save old log files
  archive:
    path: "{{comanage_tmp_dir}}/logs"
    dest: "{{comanage_tmp_dir}}/old-{{ansible_date_time.iso8601}}.tar.gz"
    remove: true
  when: logdir.stat.islnk is defined and logdir.stat.islnk == False and logfiles.matched > 0

- name: Remove old log directory
  file:
    path: "{{comanage_tmp_dir}}/logs"
    follow: false
    state: absent
  when: logdir.stat.islnk is defined and logdir.stat.islnk == False

- name: Create new log dir
  file:
    path: "/var/log/comanage"
    state: directory
    owner: root
    group: www-data
    mode: 0775

- name: Make a symlink to the new log dir
  file:
    path: "{{comanage_tmp_dir}}/logs"
    src: "/var/log/comanage"
    state: link
  when: logdir.stat.islnk is defined and logdir.stat.islnk == False

# TODO: cache must be cleared, because otherwise Comanage will look for
# plugins which haven't been installed yet.  Real solution is probably to move
# plugin installation here
- name: Clear comanage cache
  command: ./Console/clearcache
  become: true
  become_user: "{{ comanage_www_user }}"
  args:
    chdir: "{{ comanage_path }}/app"

- name: Copy comanage config
  template:
    src: "{{item}}.j2"
    dest: "{{ comanage_path }}/local/Config/{{item}}"
    mode: 0600
    owner: "{{ comanage_www_user }}"
  with_items:
    - database.php
    - email.php
    - bootstrap.php

- name: Install database schema
  command: ./Console/cake database
  become: true
  become_user: "{{ comanage_www_user }}"
  args:
    chdir: "{{ comanage_path }}/app"

- name: Check for ci_users in the COmanage database
  command: >
    mysql -Nse 'SELECT COUNT(*) FROM information_schema.tables
    WHERE table_schema = "{{ comanage_db }}" AND table_name = "{{ comanage_users_table }}";'
    -u {{ comanage_db_user }} "--password={{ comanage_db_password }}"
  register: comanage_cm_users_table_exists

- name: Setup Cake database
  command: >
    ./Console/cake database
  become: true
  become_user: "{{ comanage_www_user }}"
  args:
    chdir: "{{ comanage_path }}/app"
  when: comanage_cm_users_table_exists.stdout == "0"

- name: Upgrade Cake database
  command: >
    ./Console/cake upgrade_version
  become: true
  become_user: "{{ comanage_www_user }}"
  args:
    chdir: "{{ comanage_path }}/app"

- name: Setup Cake for login
  command: >
    ./Console/cake setup --admin-given-name "{{ comanage_admin_given_name }}"
    --admin-family-name "{{ comanage_admin_family_name }} "
    --admin-username "{{ comanage_admin_username }}"
    --enable-pooling="{{ comanage_enable_pooling }}"
  become: true
  become_user: "{{ comanage_www_user }}"
  args:
    chdir: "{{ comanage_path }}/app"
  when: comanage_cm_users_table_exists.stdout == "0"

# sometimes, when reinstalling to an existing database, the salt and seed are
# not recreated
# TODO: these chown be writable for www-data
- name: Setup Cake salt
  shell: >
    dd if=/dev/urandom bs=1 count=4000 | tr -dc 'a-zA-Z0-9' | fold -w 40
    | head -n 1 > security.salt
  args:
    creates: "{{ comanage_path }}/local/Config/security.salt"
    chdir: "{{ comanage_path }}/local/Config"
  become: true
  become_user: root

- name: Setup Cake seed
  shell: >
    dd if=/dev/urandom bs=1 count=4000 | tr -dc '0-9' | fold -w 30
    | head -n 1 > security.seed
  args:
    creates: "{{ comanage_path }}/local/Config/security.seed"
    chdir: "{{ comanage_path }}/local/Config"
  become: true
  become_user: root

- name: Check for API user in the COmanage database
  command: >
    mysql -Nse 'SELECT COUNT(*) FROM {{ comanage_db }}.{{comanage_api_users_table }}
    WHERE username="{{ comanage_api_user }}";'
    -u {{ comanage_db_user }} "--password={{ comanage_db_password }}"
  register: comanage_api_user_exists

- name: Read COmanage salt
  command: cat {{ comanage_path }}/app/Config/security.salt
  changed_when: "false"
  register: comanage_salt

- name: Create API user
  command: >
    mysql -Nse 'INSERT INTO {{ comanage_db }}.{{ comanage_api_users_table }}
    (username, password, created, modified) VALUES ("{{ comanage_api_user }}",
    SHA1("{{ comanage_salt.stdout }}{{ comanage_api_password }}"), NULL, NULL);'
    -u {{ comanage_db_user }} "--password={{ comanage_db_password }}"
  when: comanage_api_user_exists.stdout == "0"

- name: Tune ldap connections for LdapProvisioner
  lineinfile:
    path: "/etc/ldap/ldap.conf"
    line: "TLS_REQCERT allow"
    regexp: '^tls_reqcert\s.*(?i)'
    state: present

- name: Create a crontab entry
  cron:
    name: "Cake Job Cleaning"
    state: present
    minute: "0"
    hour: "3"
    user: "{{ comanage_www_user }}"
    job: "cd {{ comanage_path }}/app && Console/cake job -q"

- name: Copy filebeat config
  template: >
    src=fb_comanage.yml.j2
    dest=/etc/filebeat/conf.d/fb_comanage.yml
  notify: "restart filebeat"
