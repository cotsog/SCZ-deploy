#!/bin/bash
set -e

# helper script to start vagrant and runa nsible on the host
# run line this:
#   ./start-vm [ [vagrant_arg [vagrant_arg2 [...]]] -- [ansible_arg1 [ansible_arg2 [...]]] ]

# parse command line vars
declare -a vagrant_args
declare -a ansible_args
seen_marker=0
while [ $# -gt 0 ]
do
    arg=$1
    shift

    if [ "$arg" = "--" ]
    then
        seen_marker=1
        continue
    fi
    if [ $seen_marker -eq 0 ] # still processing vagrant args
    then
        vagrant_args+=($arg)
    else
        ansible_args+=($arg)
    fi
done

# build single docker image before vagrant starts
if [ -n "$TRAVIS" -a -z "$REENTRANT" ]
then
    scz_image=$(docker image list scz-base -q)
    if [ -z "$scz_image" ]
    then
        echo "Building docker image"
        time docker build -t scz-base --target=scz-base docker/
    else
        echo "Docker image found"
    fi
fi

# bring up the VMs if they're not running
echo "Checking if VMs/containers are running"
num_running=$(vagrant status 2>&1 |grep -E '\brunning\b'|wc -l)
if [ "$num_running" -ne 8 ]
then
    echo "Running vagrant to start containers..."
    time vagrant up --provision ${vagrant_args[*]} > vagrant.log 2>&1 || cat vagrant.log

    # fix the ssh keys (might be changed)
    net=172.20.1
    for ip in 20 21 22 23 24 25 26 27
    do
        ssh -Oexit vagrant@$net.$ip >/dev/null 2>&1 || true
        ssh-keygen -q -f ~/.ssh/known_hosts -R "$net.$ip" >/dev/null 2>&1
        ssh -Nfq -i ./.vagrant/id_rsa -o "StrictHostKeyChecking no" vagrant@$net.$ip
    done
else
    echo "VMs/containers are running"
fi

echo "Starting ansible"
time \
ansible-playbook provision.yml \
    -i ./environments/vm/inventory \
    --limit=comanage,ldap,proxy,meta,lb,client \
    --extra-vars="secrets_file=environments/vm/secrets/all.yml" \
    ${ansible_args[*]}

# restart proxy to reload all metadata (chicken finds eggs)
ansible -i ./environments/vm/inventory -m command -a 'systemctl restart pyff' proxy >> /dev/null 2>&1

exit 0
